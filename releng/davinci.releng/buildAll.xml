<project name="maqetta" default="nightly">

    <target name="nightly" depends="init">
        <tstamp>
            <format property="maqBuildTime" timezone="GMT-05:00" pattern="yyyy-MM-dd-HH:mm:ss"/>
        </tstamp>

        <!--
        -->
        <antcall target="clean">
        </antcall>
        <antcall target="populate">
        </antcall>
        <antcall target="zips">
        </antcall>

        <antcall target="updateZip">
            <param name="addPlugin" value="davinci.joomla"/>
            <param name="fromZipName" value="${maqettaArchiveName}"/>
            <param name="newZipName" value="joomla-${maqettaArchiveName}.zip"/>
        </antcall>

        <!--
        <antcall target="war"></antcall>
        -->
    </target>

    <target name="init">
        <!--  copy environment vars -->
        <property environment="env"/>
        <macrodef name="initEnvVar">
            <attribute name="varName"/>
            <attribute name="envName" default="env.@{varName}"/>
            <sequential>
                <condition property="@{varName}" value="${@{envName}}">
                    <and>
                        <not>
                            <isset property="@{varName}"/>
                        </not>
                        <isset property="@{envName}"/>
                    </and>
                </condition>
            </sequential>
        </macrodef>
        <initEnvVar varName="base"/>
        <initEnvVar varName="baseLocation"/>
        <initEnvVar varName="buildDirectory"/>
        <initEnvVar varName="maqettaCode"/>
        <initEnvVar varName="gitRepository"/>
        <initEnvVar varName="myOS"/>
        <initEnvVar varName="myWS"/>
        <initEnvVar varName="myArch"/>

        <property file="build.properties">
        </property>
        <mkdir dir="${buildDirectory}/plugins"/>
        <mkdir dir="${buildDirectory}/features"/>

    	<property name="repoName" value="maqetta" />
    	<property name="repoPath" value="${buildDirectory}/repository/${repoName}" />
    </target>

    <target name="zips">
        <ant antfile="productBuild.xml" dir="${eclipse.pdebuild.scripts}/productBuild">
            <property name="builder" value="${basedir}/zipFile"/>
        </ant>

    </target>

    <target name="war">
        <!-- build servlet bridge separately first because it is not part of the feature built -->
        <!--
        -->
        <antcall target="buildPlugin">
            <param name="pluginName" value="org.eclipse.equinox.servletbridge"/>
        </antcall>
        <delete>
            <fileset dir="${buildDirectory}/${buildLabel}" includes="org.eclipse.equinox.servletbridge*.jar">
            </fileset>
        </delete>
        <ant antfile="productBuild.xml" dir="${eclipse.pdebuild.scripts}/productBuild">
            <property name="builder" value="${basedir}/warFile"/>
        </ant>
    </target>

	  <target name="w3war">
	    <!-- build servlet bridge separately first because it is not part of the feature built -->
	    <!--
	     -->
		<antcall target="buildPlugin">
			<param name="pluginName" value="org.eclipse.equinox.servletbridge"/>
		</antcall>
		<delete >
			<fileset dir="${buildDirectory}/${buildLabel}" includes="org.eclipse.equinox.servletbridge*.jar"></fileset>
		</delete>
		<ant antfile="productBuild.xml" dir="${eclipse.pdebuild.scripts}/productBuild">
			<property name="builder" value="${basedir}/W3warFile" />
		</ant>
	  </target>

    <target name="populate">
        <condition property="getMethod" value="fromGit" else="localCopy">
            <not>
                <isset property="maqettaCode"/>
            </not>
        </condition>
        <macrodef name="populateDir">
            <attribute name="project"/>
            <attribute name="isFeature" default="false"/>
            <attribute name="extPath" default=""/>
            <sequential>
                <antcall target="${getMethod}">
                    <param name="project" value="@{project}"/>
                    <param name="isFeature" value="@{isFeature}"/>
                    <param name="extPath" value="@{extPath}"/>
                </antcall>
            </sequential>
        </macrodef>

        <!-- -->
        <!-- LIST OF MAQETTA PROJECTS GOES HERE -->
        <!-- -->

        <populateDir project="davinci.core"/>
        <populateDir project="davinci.dojo_1_7"/>
        <populateDir project="davinci.html"/>
        <populateDir project="davinci.jqueryui_1_8"/>
        <populateDir project="davinci.product" extPath="/releng"/>
        <populateDir project="davinci.yui_2_6_0"/>

        <populateDir project="davinci.joomla"/>
        <populateDir project="davinci.review"/>

        <populateDir project="org.apache.commons.fileupload"/>
        <populateDir project="org.apache.commons.io"/>

        <!--
        <populateDir project="javax.activation"/>
        <populateDir project="javax.mail"/>
        -->

    	<populateDir project="davinci.war" isFeature="true" extPath="/releng"/>

        <!--
        <populateDir project="org.eclipse.equinox.server.core" isFeature="true" extPath="/releng"/>
        <populateDir project="org.eclipse.equinox.server.servletbridge" isFeature="true" extPath="/releng"/>

        <populateDir project="org.eclipse.equinox.http.servletbridge"   extPath="/releng"/>
        <populateDir project="org.eclipse.equinox.servletbridge"   extPath="/releng"/>
        <populateDir project="org.eclipse.equinox.servletbridge.extensionbundle"   extPath="/releng"/>
        -->

    </target>

    <target name="localCopy">
        <condition property="pluginDir" value="features" else="plugins">
            <istrue value="${isFeature}"/>
        </condition>
        <defaultexcludes remove="**/.git"/>
        <defaultexcludes remove="**/.git/**"/>
        <defaultexcludes remove="**/.svn"/>
        <defaultexcludes remove="**/.svn/**"/>
        <copy todir="${buildDirectory}/${pluginDir}/${project}">
            <fileset dir="${repoPath}${extPath}/${project}"/>
        </copy>
        <defaultexcludes default="true"/>
    </target>

    <target name="fromGit">
        <condition property="pluginDir" value="features" else="plugins">
            <istrue value="${isFeature}"/>
        </condition>
        <defaultexcludes remove="**/.git"/>
        <defaultexcludes remove="**/.git/**"/>
        <defaultexcludes remove="**/.svn"/>
        <defaultexcludes remove="**/.svn/**"/>
        <copy todir="${buildDirectory}/${pluginDir}/${project}">
            <fileset dir="${repoPath}${extPath}/${project}"/>
        </copy>
        <defaultexcludes default="true"/>
    </target>

    <target name="buildPlugin">
        <property name="pluginDestination" value="${buildDirectory}/${buildLabel}"/>
        <eclipse.generateFeature
         featureId="${pluginName}.feature"
         buildDirectory="${buildDirectory}"
         baseLocation="${baseLocation}"
         productFile="${product}"
         verify="false"
         pluginPath="${buildDirectory}"
         pluginList="${pluginName}"
         includeLaunchers="false"
        />
        <ant antfile="build.xml" dir="${eclipse.pdebuild.scripts}">
            <property name="component" value="${pluginName}.feature"/>
            <property name="builder" value="${basedir}/genericPlugin"/>
            <property name="outputUpdateJars" value="true"/>
            <property name="topLevelElementId " value="${pluginName}.feature"/>
            <property name="javacfailonerror" value="true"/>
        </ant>

        <!-- at this point the plugin is in a zip file,  unzip the jar to the desired location -->
        <property name="tmpDir" value="${buildDirectory}/tempJar"/>
        <mkdir dir="${tmpDir}"/>
        <unzip dest="${tmpDir}" src="${buildDirectory}/${buildLabel}/${pluginName}.feature-release.zip"/>
        <move toDir="${pluginDestination}">
            <fileset file="${tmpDir}/eclipse/plugins/*.jar">
            </fileset>
        </move>
        <delete dir="${tmpDir}"/>
        <delete file="${buildDirectory}/${buildLabel}/${pluginName}.feature-release.zip"/>
        <delete dir="${buildDirectory}/features/${pluginName}.feature"/>

    </target>

    <target name="makeEar">
        <mkdir dir="${assemblyTempDir}"/>
        <copy todir="${assemblyTempDir}" file="${buildResults}/${warFileName}"/>
        <copy todir="${assemblyTempDir}">
            <fileset dir="${warProject}/earRootFiles"/>
        </copy>
        <zip destfile="${buildResults}/${earFile}" filesonly="false">
            <zipfileset dir="${assemblyTempDir}" includes="**/**" excludes=""/>
        </zip>
        <delete dir="${assemblyTempDir}"/>
    </target>

    <!-- create a new zip file from the base zip file with a new plugin added -->
    <target name="updateZip">
        <property name="tempDir" value="${buildDirectory}/maqettaTmp"/>
        <property name="fromZipName" value="${maqettaArchiveName}"/>
        <property name="maqettaZipPath" value="${buildDirectory}/${buildLabel}/${fromZipName}.zip"/>
        <mkdir dir="${tempDir}"/>
        <!-- unzip the base zip file -->
        <unzip dest="${tempDir}" src="${maqettaZipPath}"/>

        <!-- build the plugin being added -->
        <antcall target="buildPlugin">
            <param name="pluginName" value="${addPlugin}"/>
            <param name="pluginDestination" value="${tempDir}/plugins"/>
        </antcall>

        <!-- add the plugin to the config.ini -->
        <replaceregexp file="${tempDir}/configuration/config.ini"
         match="davinci.core@4:start(.*)"
         replace="davinci.core@4:start,${addPlugin}@5:start\1"
         byline="true"
        />

        <!-- make the new zip file -->
        <zip destfile="${buildDirectory}/${buildLabel}/${newZipName}" filesonly="false">
            <zipfileset dir="${tempDir}" includes="**/**" excludes=""/>
            <zipfileset dir="${tempDir}" includes="*.command" filemode="755"/>
        </zip>
        <delete dir="${tempDir}"/>
    </target>

    <!-- create a new war file from the base war file with a new plugin added -->
    <target name="updateWar">
        <property name="tempDir" value="${buildDirectory}/maqettaTmp"/>
        <property name="maqettaWarPath" value="${buildDirectory}/${buildLabel}/${warFileName}.war"/>
        <mkdir dir="${tempDir}"/>

        <!-- unzip the base zip file -->
        <unzip dest="${tempDir}" src="${maqettaWarPath}"/>

        <!-- build the plugin being added -->
        <antcall target="buildPlugin">
            <param name="pluginName" value="${addPlugin}"/>
            <param name="pluginDestination" value="${tempDir}/WEB-INF/plugins"/>
        </antcall>


        <path id="mystery.file.id">
            <fileset dir="${tempDir}/WEB-INF/plugins">
                <include name="${addPlugin}*.jar"/>
            </fileset>
        </path>

        <property name="mystery.file" refid="mystery.file.id"/>
        <basename property="newJarName" file="${mystery.file}"/>
        <basename property="newPluginName" file="${mystery.file}" suffix=".jar"/>

        <!-- add the plugin to the config.ini -->
        <concat destfile="${tempDir}/WEB-INF/configuration/org.eclipse.equinox.simpleconfigurator/bundles.info"
         append="yes">
            ${newPluginName},plugins/${newJarName},4,true
        </concat>
        <replaceregexp file="${tempDir}/WEB-INF/configuration/org.eclipse.equinox.simpleconfigurator/bundles.info"
         match="^${addPlugin}_(.*)"
         replace="${addPlugin},\1"
         byline="true"
        />

        <!-- make the new zip file -->
        <zip destfile="${buildDirectory}/${buildLabel}/${newWarName}" filesonly="false">
            <zipfileset dir="${tempDir}" includes="**/**" excludes=""/>
        </zip>
        <delete dir="${tempDir}"/>
    </target>

    <target name="clean" depends="init">

        <defaultexcludes remove="**/.gitignore"/>
        <defaultexcludes remove="**/.git"/>
        <defaultexcludes remove="**/.git/**"/>

        <delete includeemptydirs="true">
            <fileset dir="${buildDirectory}" includes="plugins/,features/,result/,*.properties,*.xml"/>
        </delete>
        <defaultexcludes default="true"/>
        <mkdir dir="${buildDirectory}/plugins"/>
        <mkdir dir="${buildDirectory}/features"/>
    </target>

</project>